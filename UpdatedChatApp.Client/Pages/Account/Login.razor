@page "/"
@using Blazored.Toast.Services
@using UpdatedChatApp.Client.Services
@using UpdatedChatApp.model.Request.Account
@using UpdatedChatApp.model.Response.Authentication
@inject NavigationManager navigation
@inject HttpClient http
@* @inject IToastService toastService *@
@inject LocalStorageService localstorage

<div class="container">
    <h2>Sign In</h2>
    <EditForm Model="loginRequest" OnValidSubmit="UserLogin">
        <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" class="form-control" placeholder="Email" @bind="loginRequest.Email" />
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" class="form-control" @bind="loginRequest.Password" />
        </div>
        @*  <div class="form-check">
        <input type="checkbox" id="rememberMe" class="form-check-input" />
        <label class="form-check-label" for="rememberMe">Remember me</label>
        </div> *@
        <div class="mt-2">
            <a href="/forgot-password">Forgot your password?</a>
        </div>
        <button type="submit" class="btn btn-primary mt-3 w-100">Login</button>
    </EditForm>
    <div class="mt-3">
        Don't have an account yet? <a href="/register">Sign up</a>
    </div>
</div>

<style>
    .container {
        max-width: 400px;
        margin: auto;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 15px;
    }

    .btn-primary {
        background-color: #8a2be2;
        border-color: #8a2be2;
    }

        .btn-primary:hover {
            background-color: #7a1dd1;
            border-color: #7a1dd1;
        }

    a {
        color: #8a2be2;
    }
</style>

@code {

    //user no data browser na localstorage mathi get karva mate
    //var userLoginInfo = await localStorageService.GetItemAsync<LoginResponse>("userLoginInfo");
    //if (userLoginInfo != null)
    //{
    // Use the stored data as needed
    // var userData = JsonSerializer.Deserialize<dynamic>(userLoginInfo.Data);
    // Access userData.Id, userData.Email, userData.Token, etc.
    // }

    private LoginRequest loginRequest = new LoginRequest();

    private async Task UserLogin()
    {
        var apiEndpoint = "https://localhost:7145/api/Account/login";

        try
        {
            var response = await http.PostAsJsonAsync(apiEndpoint, loginRequest);

            if (response.IsSuccessStatusCode)
            {
                var loginResponse = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (loginResponse != null && loginResponse.IsSuccess)
                {
                    // Store the entire login response in local storage
                    await localstorage.SetItemAsync("userLoginInfo", loginResponse);

                    //toastService.ShowSuccess("Login successful!");
                    navigation.NavigateTo("/chats");
                }
                else
                {
                    //ToastService.ShowError(loginResponse?.ErrorMessage ?? "Login failed");
                }
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine("Error: " + errorMessage);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("An error occurred: " + ex.Message);
        }
    }
}