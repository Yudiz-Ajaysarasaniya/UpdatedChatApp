@page "/chats"
<link href="css/style.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
@using Blazored.Toast.Services
@using Microsoft.AspNetCore.SignalR.Client
@using UpdatedChatApp.Client.Models
@using UpdatedChatApp.Client.Services
@using UpdatedChatApp.model.Entities
@using UpdatedChatApp.model.Request.Account
@using UpdatedChatApp.model.Response.Authentication
@using UpdatedChatApp.model.Response.User
@inject HttpClient http
@inject NavigationManager navigation
@inject LocalStorageService localstorage
@inject IJSRuntime JSRuntime
@inject IToastService toastService

<script>
    window.clickElement = (elementId) => {
        document.getElementById(elementId).click();
    };
</script>

<script>
    // Add this to your existing script section
    window.downloadFile = (url, fileName) => {
        fetch(url)
            .then(response => response.blob())
            .then(blob => {
                const link = document.createElement('a');
                link.href = window.URL.createObjectURL(blob);
                link.download = fileName;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                window.URL.revokeObjectURL(link.href);
            })
            .catch(console.error);
    };
</script>


<body>
    <div class="chat-container">
        <div class="chat-list">
            <!-- User Profile Section -->
            <div class="user-profile" @onclick="ShowLoggedInUserProfile">
                <img src="images/profile.png" alt="Profile" class="user-profile-image" />
                <div class="user-info">
                    <p class="username">@LoggedInUserDetails.UserName</p> <!-- Adjust to display name -->
                    @* <p class="balance">₹ 0.00</p>
                    <p class="status">Available</p> *@
                </div>
            </div>


            <!-- Search Box -->
            <div class="search-container">
                <input type="text" class="search-box" placeholder="Search users..." @bind="searchQuery" @oninput="FilterUsers">
                <i class="fas fa-search search-icon"></i>
            </div>


            <!-- Users List -->
            @foreach (var users in filteredUsers)

            {

                <div class="chat-list-item @(selectedUser?.Id == users.Id ? "active" : "")" @onclick="@(() => SelectUser(users))">

                    <img src="images/profile.png" alt="Profile" />

                    <div class="chat-info">

                        <p class="chat-name">@users.UserName</p>

                    </div>

                </div>

            }
        </div>

        @* chat window *@
        <div class="chat-window">
            @* chat header *@
            @if (selectedUser == null)
            {
                <!-- Welcome Screen -->
                <div class="welcome-container">
                    @* <img src="images/profile.png" alt="Profile Image" class="welcome-profile-image">
                <div class="welcome-email">ajaysarasaniya11@gmail.com</div> *@
                    <div class="welcome-message">Welcome to ChatApp!</div>
                </div>
            }
            else
            {

                <div class="chat-header">

                    @if (selectedUser != null)

                    {

                        <div class="user-profile-trigger" @onclick="ShowUserProfile">

                            <img src="images/profile.png" alt="Profile" width="40" height="40" class="profile-image-button" />

                            <h5 class="user-name-button">@selectedUser.UserName</h5>

                        </div>

                    }

                    <button class="btn btn-danger ms-auto" @onclick="Logout">Logout</button>

                </div>

                <!-- User Profile Dialog -->
                <div class="dialog-overlay @(_isDialogVisible ? "visible" : "")" @onclick="CloseDialog">
                    <div class="dialog-content" @onclick:stopPropagation="true">
                        <div class="dialog-header">
                            <img src="images/profile.png" alt="Profile" class="dialog-profile-image" />
                            <h2 class="dialog-title">@selectedUser?.UserName</h2>
                            <button class="close-button" @onclick="CloseDialog">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                        <div class="dialog-body">
                            <div class="profile-info">
                                <div class="info-item">
                                    <i class="fas fa-envelope"></i>
                                    <span>@SelectedUserDetails.Email</span><br />
                                    <span>Name : @SelectedUserDetails.UserName</span><br />
                                    <span>@SelectedUserDetails.Password</span>
                                </div>
                                <div class="info-item">
                                    <i class="fas fa-circle text-success"></i>
                                    <span>Online</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @* chat view *@
                <div class="message-area" @ref="messageAreaRef">

                    @foreach (var msg in messages)

                    {
                        @* In the message-area div, update the message display: *@
                        <div class="message @(msg.SenderId == currentUser.Id ? "message-right" : "message-left")">
                            <div class="message-content">
                                @if (msg.Content.StartsWith("[File]"))
                                {
                                    var fileInfo = msg.Content.Replace("[File] ", "").Split(" - ");
                                    var fileName = fileInfo[0];
                                    var fileUrl = fileInfo[1];
                                    <div class="file-message @(msg.SenderId == currentUser.Id ? "sent-file" : "received-file")"
                                         @onclick="() => HandleFileClick(fileUrl, fileName, msg.SenderId == currentUser.Id)">
                                        <i class="fas fa-file"></i>
                                        <span class="file-name">@fileName</span>
                                        @if (msg.SenderId != currentUser.Id)
                                        {
                                            <i class="fas fa-download"></i>
                                        }
                                    </div>
                                }
                                else
                                {
                                    @msg.Content
                                }
                            </div>
                        </div>
                    }

                </div>

                @* Input area ma aa changes karo *@
                <div class="input-area">
                    <div class="input-group">
                        <InputFile OnChange="@HandleFileSelection" class="d-none" id="fileInput" accept="image/*,.pdf,.doc,.docx" multiple />
                        <i class="fa-solid fa-paperclip" @onclick="@(() => JSRuntime.InvokeVoidAsync("clickElement", "fileInput"))" style="cursor: pointer;"></i>
                        <input type="text" @bind="newMessage" @onkeyup="HandleKeyPress"
                               placeholder="Type a message..." aria-label="Type a message" aria-describedby="send-button" />
                        <button class="btn btn-outline-secondary" type="button" id="send-button" @onclick="SendMessage">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>

    @* Add a new dialog for logged-in user profile *@
    
    <div class="dialog-overlay @(_isLoggedInUserDialogVisible ? "visible" : "")" @onclick="CloseLoggedInUserDialog">
        <div class="dialog-content" @onclick:stopPropagation="true">
            <div class="dialog-header">
                <img src="images/profile.png" alt="Profile" class="dialog-profile-image" />
                <h2 class="dialog-title">@LoggedInUserDetails.UserName</h2>
                <button class="close-button" @onclick="CloseLoggedInUserDialog">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="dialog-body">
                <div class="profile-info">
                    <div class="info-item">
                        <i class="fas fa-envelope"></i>
                        <span>@LoggedInUserDetails.Email</span><br />
                        <span>Name: @LoggedInUserDetails.UserName</span><br />
                        <span>@LoggedInUserDetails.Password</span>
                    </div>
                    <div class="info-item">
                        <i class="fas fa-circle text-success"></i>
                        <span>Online</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

</body>



@code {
    private string searchQuery = "";
    private List<UserListRequest> user = new List<UserListRequest>();
    private UserListRequest selectedUser;
    private LoginResponseData currentUser;
    private List<ChatMessage> messages = new List<ChatMessage>();
    private string newMessage = "";
    private HubConnection hubConnection;
    private ElementReference messageAreaRef;
    private Timer messagePollingTimer;
    private bool _isDialogVisible;
    private RegisterRequest SelectedUserDetails = new RegisterRequest();
    private bool _isLoggedInUserDialogVisible;
    private RegisterRequest LoggedInUserDetails = new RegisterRequest();
    private List<IBrowserFile> selectedFiles = new List<IBrowserFile>();
    private string fileUrl;

    protected override async Task OnInitializedAsync()
    {
        var response = await localstorage.GetItemAsync<LoginResponse>("userLoginInfo");
        if (response?.Data != null)
        {
            currentUser = response.Data;
            Console.WriteLine($"Logged in user: {currentUser.Id}");
        }
        else
        {
            Console.WriteLine("currentUser is null - unable to retrieve login info.");
            navigation.NavigateTo("/");
            return;
        }
        await GetLoggedInUserDetails();
        await LoadUsers();
        await SetupSignalRConnection();
    }

    private async Task SetupSignalRConnection()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(navigation.ToAbsoluteUri($"https://localhost:7145/signalrhelper?userId={currentUser.Id}"))
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<Guid, string, DateTime>("ReceiveMessage", async (senderId, message, timestamp) =>
            {
                // Only add message if it's related to current chat
                if (selectedUser != null && (senderId == selectedUser.Id || senderId == currentUser.Id))
                {
                    var msg = new ChatMessage
                        {
                            SenderId = senderId,
                            ReceiverId = selectedUser.Id,
                            Content = message,
                            Timestamp = timestamp
                        };
                    messages.Add(msg);
                    await InvokeAsync(StateHasChanged);
                    await ScrollToBottom();
                }
            });

            await hubConnection.StartAsync();
            //Console.WriteLine("SignalR Connected Successfully");
        }
        catch (Exception ex)
        {
            toastService.ShowError("Error setting up SignalR connection");
            //Console.WriteLine($"Error setting up SignalR connection: {ex.Message}");
        }
    }

    private async void ShowUserProfile()
    {
        if (selectedUser != null)
        {
            await GetUserDetails();
            _isDialogVisible = true;
            StateHasChanged();
        }
    }

    private void CloseDialog()
    {
        _isDialogVisible = false;
        StateHasChanged();
    }


    private async Task LoadChatHistory()
    {
        var apiEndpoint = $"https://localhost:7145/api/Chat/GetChatHistory?user1Id={currentUser.Id}&user2Id={selectedUser.Id}";
        var response = await http.GetFromJsonAsync<List<ChatMessage>>(apiEndpoint);
        if (response != null)
        {
            messages = response;
        }
    }

    private async Task LoadUsers()
    {
        if (currentUser?.Email == null)
        {
            Console.WriteLine("Error: currentUser.Email is null");
            return;
        }

        var apiEndpoint = $"https://localhost:7145/api/User/GetAllUsers?sender={Uri.EscapeDataString(currentUser.Email)}";
        var response = await http.GetFromJsonAsync<List<UserListRequest>>(apiEndpoint);
        if (response != null)
        {
            user = response;
        }
    }

    private async Task SelectUser(UserListRequest listRequest)
    {
        selectedUser = listRequest;
        await LoadChatHistory();
        StateHasChanged();
        //await Task.Delay(100);
        ScrollToBottom();
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(newMessage) && selectedUser != null)
        {
            try
            {
                if (hubConnection.State == HubConnectionState.Connected)
                {
                    await hubConnection.InvokeAsync("SendMessage", currentUser.Id, selectedUser.Id, newMessage);
                    newMessage = "";
                    await ScrollToBottom();
                }
                else
                {
                    Console.WriteLine("Reconnecting...");
                    await SetupSignalRConnection();
                    // Retry sending message
                    if (hubConnection.State == HubConnectionState.Connected)
                    {
                        await hubConnection.InvokeAsync("SendMessage", currentUser.Id, selectedUser.Id, newMessage);
                        newMessage = "";
                        await ScrollToBottom();
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending message: {ex.Message}");
            }
        }
    }
    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", messageAreaRef);
    }


    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    private async Task Logout()
    {
        await hubConnection.SendAsync("LeaveRoom", currentUser.Id);
        await hubConnection.StopAsync();
        await localstorage.RemoveItemAsync("userLoginInfo");
        navigation.NavigateTo("/");
    }

    private List<UserListRequest> filteredUsers => string.IsNullOrWhiteSpace(searchQuery)
    ? user
    : user.Where(u => u.UserName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();

    private void FilterUsers(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        StateHasChanged();
    }
    private async Task GetUserDetails()
    {
        var ApiEndPoint = $"https://localhost:7145/api/User/GetUserById?id={selectedUser.Id}";
        var response = await http.GetFromJsonAsync<RegisterRequest>(ApiEndPoint);
        if (response != null)
        {
            SelectedUserDetails = response;
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("user not found");
        }
    }

    private async Task ShowLoggedInUserProfile()
    {
        await GetLoggedInUserDetails();
        _isLoggedInUserDialogVisible = true;
        StateHasChanged();
    }

    private void CloseLoggedInUserDialog()
    {
        _isLoggedInUserDialogVisible = false;
        StateHasChanged();
    }

    private async Task GetLoggedInUserDetails()
    {
        var ApiEndPoint = $"https://localhost:7145/api/User/GetUserById?id={currentUser.Id}";
        var response = await http.GetFromJsonAsync<RegisterRequest>(ApiEndPoint);
        if (response != null)
        {
            LoggedInUserDetails = response;
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("user not found");
        }
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles().ToList();

        if (selectedFiles.Count > 0)
        {
            await SendFileMessage();
        }
    }



    private async Task SendFileMessage()
    {
        try
        {
            var content = new MultipartFormDataContent();

            foreach (var file in selectedFiles)
            {
                var fileContent = new StreamContent(file.OpenReadStream(maxAllowedSize: 10485760)); // 10MB max per file
                content.Add(fileContent, "files", file.Name);
            }

            content.Add(new StringContent(currentUser.Id.ToString()), "senderId");
            content.Add(new StringContent(selectedUser.Id.ToString()), "receiverId");

            var response = await http.PostAsync("https://localhost:7145/api/Chat/UploadFile", content);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<List<FileResponse>>();

                if (result != null && hubConnection.State == HubConnectionState.Connected)
                {
                    foreach (var fileResponse in result)
                    {
                        var baseUrl = "https://localhost:7145";
                        var fileUrl = $"{baseUrl}{fileResponse.FileUrl}";
                        var fileMessage = $"[File] {Path.GetFileName(fileResponse.FileUrl)} - {fileUrl}";
                        await hubConnection.InvokeAsync("SendMessage", currentUser.Id, selectedUser.Id, fileMessage);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error uploading files: {ex.Message}");
        }
    }


    private async Task HandleFileClick(string fileUrl, string fileName, bool isSender)
    {
        try
        {
            if (isSender)
            {
                // For sent files - open in new tab
                await JSRuntime.InvokeVoidAsync("window.open", fileUrl, "_blank");
            }
            else
            {
                // For received files - trigger download
                // Using JS interop to trigger the download
                await JSRuntime.InvokeVoidAsync("downloadFile", fileUrl, fileName);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling file click: {ex.Message}");
        }
    }


}


