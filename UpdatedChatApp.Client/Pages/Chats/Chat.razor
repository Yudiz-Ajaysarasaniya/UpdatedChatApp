@page "/chats"
@using Microsoft.AspNetCore.SignalR.Client
@using UpdatedChatApp.Client.Services
@using UpdatedChatApp.model.Entities
@using UpdatedChatApp.model.Response.Authentication
@using UpdatedChatApp.model.Response.User
@inject HttpClient http
@inject NavigationManager navigation
@inject LocalStorageService localstorage
@inject IJSRuntime JSRuntime

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Application</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* Custom CSS */
        body, html {
            height: 100%;
            margin: 0;
        }

        .chat-container {
            display: flex;
            height: 100vh;
        }

        .chat-list {
            width: 25%;
            background-color: #f8f9fa;
            overflow-y: auto;
            border-right: 1px solid #ddd;
            padding: 15px;
        }

        .chat-list-item {
            display: flex;
            align-items: center;
            padding: 10px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

            .chat-list-item img {
                border-radius: 50%;
                margin-right: 10px;
            }

            .chat-list-item:hover {
                background-color: #e9ecef;
            }

        .chat-window {
            flex: 1;
            display: flex;
            flex-direction: column;
            background-color: #fff;
        }

        .chat-header {
            padding: 15px;
            padding-right: 100px;
            border-bottom: 1px solid #ddd;
            display: flex;
            align-items: center;
        }

            .chat-header img {
                border-radius: 50%;
                margin-right: 15px;
            }

        .message-area {
            flex: 1;
            padding: 15px;
            overflow-y: auto;
            background-color: #f1f3f5;
        }

        .message {
            margin-bottom: 15px;
        }

        .message-left {
            text-align: left;
            background-color: #d1e7dd;
            padding: 10px;
            border-radius: 10px;
            max-width: 70%;
        }

        .message-right {
            text-align: right;
            background-color: #bee5eb;
            padding: 10px;
            border-radius: 10px;
            max-width: 70%;
            margin-left: auto;
        }

        .input-area {
            padding: 15px;
            border-top: 1px solid #ddd;
        }

            .input-area input {
                width: 100%;
                padding: 10px;
                border-radius: 5px;
                border: 1px solid #ccc;
            }

        .input-group .btn img {
            display: inline-block;
            vertical-align: middle;
        }

    </style>
</head>

<body>
    <div class="chat-container">
        <div class="chat-list">
            @* chat list *@
            @foreach (var users in user)
            {
                <div class="chat-list-item" @onclick="@(() => SelectUser(users))">
                    <img src="images/profile.png" alt="Profile" width="40" height="40" />
                    <span>@users.UserName</span>
                </div>
            }
        </div>

        @* chat window *@
        <div class="chat-window">
            @* chat header *@
            <div class="chat-header">
                @if (selectedUser != null)
                {
                    <img src="images/profile.png" alt="Profile" width="40" height="40" />
                    <h5>@selectedUser.UserName</h5>
                }
                <button class="btn btn-danger ms-auto" @onclick="Logout">Logout</button>
            </div>
            @* chat view *@
            <div class="message-area" @ref="messageAreaRef">
                @foreach (var msg in messages)
                {
                    <div class="message @(msg.SenderId == currentUser.Id ? "message-right" : "message-left")">
                        <div>@msg.Content</div>
                        <small>@msg.Timestamp.ToString("g")</small>
                    </div>
                }
            </div>

            <div class="input-area">
                <div class="input-group">
                    <input type="text" class="form-control" @bind="newMessage" @onkeyup="HandleKeyPress"
                           placeholder="Type a message..." aria-label="Type a message" aria-describedby="send-button">
                    <button class="btn btn-outline-secondary" type="button" id="send-button" @onclick="SendMessage">
                        <img src="images/sendimg.png" alt="Send" width="20" height="20">
                    </button>
                </div>
            </div>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>

@code {

    private List<UserListRequest> user = new List<UserListRequest>();
    private UserListRequest selectedUser;
    private LoginResponseData currentUser;
    private List<ChatMessage> messages = new List<ChatMessage>();
    private string newMessage = "";
    private HubConnection hubConnection;
    private ElementReference messageAreaRef;
    private Timer messagePollingTimer;

    protected override async Task OnInitializedAsync()
    {
        var response = await localstorage.GetItemAsync<LoginResponse>("userLoginInfo");
        if (response?.Data != null)
        {
            currentUser = response.Data;
            Console.WriteLine($"Logged in user: {currentUser.Id}");
        }
        else
        {
            Console.WriteLine("currentUser is null - unable to retrieve login info.");
            navigation.NavigateTo("/");
            return;
        }

        await LoadUsers();
        await SetupSignalRConnection();
    }

    private async Task SetupSignalRConnection()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(navigation.ToAbsoluteUri($"https://localhost:7145/signalrhelper?userId={currentUser.Id}"))
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<Guid, string, DateTime>("ReceiveMessage", async (senderId, message, timestamp) =>
            {
                // Only add message if it's related to current chat
                if (selectedUser != null && (senderId == selectedUser.Id || senderId == currentUser.Id))
                {
                    var msg = new ChatMessage
                        {
                            SenderId = senderId,
                            ReceiverId = selectedUser.Id,
                            Content = message,
                            Timestamp = timestamp
                        };
                    messages.Add(msg);
                    await InvokeAsync(StateHasChanged);
                    await ScrollToBottom();
                }
            });

            await hubConnection.StartAsync();
            Console.WriteLine("SignalR Connected Successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting up SignalR connection: {ex.Message}");
        }
    }

    private async Task LoadChatHistory()
    {
        var apiEndpoint = $"https://localhost:7145/api/Chat/GetChatHistory?user1Id={currentUser.Id}&user2Id={selectedUser.Id}";
        var response = await http.GetFromJsonAsync<List<ChatMessage>>(apiEndpoint);
        if (response != null)
        {
            messages = response;
        }
    }

    private async Task LoadUsers()
    {
        if (currentUser?.Email == null)
        {
            Console.WriteLine("Error: currentUser.Email is null");
            return;
        }

        var apiEndpoint = $"https://localhost:7145/api/User/GetAllUsers?sender={Uri.EscapeDataString(currentUser.Email)}";
        var response = await http.GetFromJsonAsync<List<UserListRequest>>(apiEndpoint);
        if (response != null)
        {
            user = response;
        }
    }

    private async Task SelectUser(UserListRequest listRequest)
    {
        selectedUser = listRequest;
        await LoadChatHistory();
        StateHasChanged();
        //await Task.Delay(100);
        ScrollToBottom();
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(newMessage) && selectedUser != null)
        {
            try
            {
                if (hubConnection.State == HubConnectionState.Connected)
                {
                    await hubConnection.InvokeAsync("SendMessage", currentUser.Id, selectedUser.Id, newMessage);
                    newMessage = "";
                    await ScrollToBottom();
                }
                else
                {
                    Console.WriteLine("Reconnecting...");
                    await SetupSignalRConnection();
                    // Retry sending message
                    if (hubConnection.State == HubConnectionState.Connected)
                    {
                        await hubConnection.InvokeAsync("SendMessage", currentUser.Id, selectedUser.Id, newMessage);
                        newMessage = "";
                        await ScrollToBottom();
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending message: {ex.Message}");
            }
        }
    }
    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", messageAreaRef);
    }


    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    private async Task Logout()
    {
        await hubConnection.SendAsync("LeaveRoom", currentUser.Id);
        await hubConnection.StopAsync();
        await localstorage.RemoveItemAsync("userLoginInfo");
        navigation.NavigateTo("/");
    }
}
